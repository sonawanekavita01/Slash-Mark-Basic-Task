<!--Task 1 Text Encryption Using Cryptographic Algorithms

Description: You can build a simple web application to encrypt and decrypt
textual information that the user keys in.
Remember that strong encryption should produce different outputs even given the same input.

-->



<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Text Encryption and Decryption</title>
<style>
    body {
        
        background-image:url(https://www.kaspersky.com/content/en-global/images/repository/isc/2021/encryption-1.jpg) ;
        background-size: 100%;
        background-position:center ;
        background-attachment: fixed;
        background-repeat: no-repeat;
        font-family: Arial, sans-serif;
        margin: 10px;
        padding: 10px;
    }
    textarea {
        width: 50%;
        height: 80px;
        margin-bottom: 10px;
        resize: none;
    }
    button {
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
    }
</style>
</head>
<body>
    <h1 style="color: aliceblue;">Text Encryption and Decryption</h1>
   
    <textarea id="inputText" placeholder="Enter text to encrypt or decrypt"></textarea>
    <br>
    <button onclick="encrypt()">Encrypt</button>
    
    <p style="color: aliceblue;" ><strong>Encrypted Text:</strong></p>
    <textarea id="encryptedText" readonly></textarea>
    <br>
    <button onclick="decrypt()">Decrypt</button>
    <p style="color: aliceblue;" ><strong>Decrypted Text:</strong></p>
    <textarea id="decryptedText" readonly></textarea>
   
    <script>
        async function encrypt() {
            const input = document.getElementById("inputText").value;
            const textEncoder = new TextEncoder();
            const encodedData = textEncoder.encode(input);

            const key = await window.crypto.subtle.generateKey(
                {
                    name: "AES-GCM",
                    length: 256
                },
                true,
                ["encrypt", "decrypt"]
            );

            const iv = window.crypto.getRandomValues(new Uint8Array(12));

            const encryptedData = await window.crypto.subtle.encrypt(
                {
                    name: "AES-GCM",
                    iv: iv
                },
                key,
                encodedData
            );

            const encryptedText = btoa(String.fromCharCode(...new Uint8Array(encryptedData)));
            document.getElementById("encryptedText").value = encryptedText;
            document.getElementById("encryptedText").setAttribute("data-iv", JSON.stringify(Array.from(iv)));
            document.getElementById("encryptedText").setAttribute("data-key", JSON.stringify(await window.crypto.subtle.exportKey("jwk", key)));
        }

        async function decrypt() {
            const encryptedText = document.getElementById("encryptedText").value;
            const encryptedData = Uint8Array.from(atob(encryptedText), c => c.charCodeAt(0));
            const iv = new Uint8Array(JSON.parse(document.getElementById("encryptedText").getAttribute("data-iv")));
            const key = await window.crypto.subtle.importKey(
                "jwk",
                JSON.parse(document.getElementById("encryptedText").getAttribute("data-key")),
                { name: "AES-GCM", length: 256 },
                true,
                ["encrypt", "decrypt"]
            );

            const decryptedData = await window.crypto.subtle.decrypt(
                {
                    name: "AES-GCM",
                    iv: iv
                },
                key,
                encryptedData
            );

            const textDecoder = new TextDecoder();
            const decryptedText = textDecoder.decode(decryptedData);
            document.getElementById("decryptedText").value = decryptedText;
        }
    </script>
</body>
</html>

